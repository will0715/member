{"version":3,"sources":["views/auth/RegisterView/RegisterForm.js","views/auth/RegisterView/index.js","utils/analytics.js","components/Page.js"],"names":["useStyles","makeStyles","root","RegisterForm","className","onSubmitSuccess","rest","classes","dispatch","useDispatch","initialValues","firstName","lastName","email","password","policy","validationSchema","Yup","shape","max","required","min","oneOf","onSubmit","values","a","setErrors","setStatus","setSubmitting","register","success","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","clsx","TextField","error","Boolean","fullWidth","helperText","label","margin","name","onBlur","onChange","type","value","variant","Box","alignItems","display","mt","ml","Checkbox","checked","Typography","color","Link","component","href","FormHelperText","Button","disabled","size","default","theme","justifyContent","backgroundColor","palette","background","dark","height","minHeight","flexDirection","paddingBottom","paddingTop","RegisterView","history","useHistory","Page","title","Container","maxWidth","mb","to","Logo","RouterLink","backButton","Card","CardContent","gutterBottom","push","my","Divider","track","window","gtag","pageview","props","process","REACT_APP_GA_MEASUREMENT_ID","event","forwardRef","ref","children","location","useLocation","sendPageViewEvent","useCallback","page_path","pathname","useEffect","Helmet"],"mappings":"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","file":"static/js/7.8d09bc9f.chunk.js","sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  FormHelperText,\n  TextField,\n  Typography,\n  Link,\n  makeStyles\n} from '@material-ui/core';\nimport { register } from '../../../actions/accountActions';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction RegisterForm({ className, onSubmitSuccess, ...rest }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        policy: false\n      }}\n      validationSchema={Yup.object().shape({\n        firstName: Yup.string()\n          .max(255)\n          .required('First name is required'),\n        lastName: Yup.string()\n          .max(255)\n          .required('Last name is required'),\n        email: Yup.string()\n          .email('Must be a valid email')\n          .max(255)\n          .required('Email is required'),\n        password: Yup.string()\n          .min(7)\n          .max(255)\n          .required('Password is required'),\n        policy: Yup.boolean().oneOf([true], 'This field must be checked')\n      })}\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n        try {\n          await dispatch(register(values));\n          onSubmitSuccess();\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n        <form className={clsx(classes.root, className)} onSubmit={handleSubmit} {...rest}>\n          <TextField\n            error={Boolean(touched.firstName && errors.firstName)}\n            fullWidth\n            helperText={touched.firstName && errors.firstName}\n            label=\"First Name\"\n            margin=\"normal\"\n            name=\"firstName\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"firstName\"\n            value={values.firstName}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.lastName && errors.lastName)}\n            fullWidth\n            helperText={touched.lastName && errors.lastName}\n            label=\"Last Name\"\n            margin=\"normal\"\n            name=\"lastName\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"lastName\"\n            value={values.lastName}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.email && errors.email)}\n            fullWidth\n            helperText={touched.email && errors.email}\n            label=\"Email Address\"\n            margin=\"normal\"\n            name=\"email\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"email\"\n            value={values.email}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n          <Box alignItems=\"center\" display=\"flex\" mt={2} ml={-1}>\n            <Checkbox checked={values.policy} name=\"policy\" onChange={handleChange} />\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              I have read the{' '}\n              <Link component=\"a\" href=\"#\" color=\"secondary\">\n                Terms and Conditions\n              </Link>\n            </Typography>\n          </Box>\n          {Boolean(touched.policy && errors.policy) && (\n            <FormHelperText error>{errors.policy}</FormHelperText>\n          )}\n          <Box mt={2}>\n            <Button\n              color=\"secondary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Create account\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nRegisterForm.propTypes = {\n  className: PropTypes.string,\n  onSubmitSuccess: PropTypes.func\n};\n\nRegisterForm.default = {\n  onSubmitSuccess: () => {}\n};\n\nexport default RegisterForm;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Divider,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport Page from '../../../components/Page';\nimport Logo from '../../../components/Logo';\nimport RegisterForm from './RegisterForm';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.dark,\n    display: 'flex',\n    height: '100%',\n    minHeight: '100%',\n    flexDirection: 'column',\n    paddingBottom: 80,\n    paddingTop: 80\n  }\n}));\n\nfunction RegisterView() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleSubmitSuccess = () => {\n    history.push('/login');\n  };\n\n  return (\n    <Page className={classes.root} title=\"Register\">\n      <Container maxWidth=\"sm\">\n        <Box mb={5} display=\"flex\" alignItems=\"center\">\n          <RouterLink to=\"/\">\n            <Logo />\n          </RouterLink>\n          <Button component={RouterLink} to=\"/\" className={classes.backButton}>\n            Back to home\n          </Button>\n        </Box>\n        <Card>\n          <CardContent>\n            <Typography gutterBottom variant=\"h2\" color=\"textPrimary\">\n              Sign up\n            </Typography>\n            <Typography variant=\"subtitle1\">Sign up on the internal platform</Typography>\n            <Box mt={3}>\n              <RegisterForm onSubmitSuccess={handleSubmitSuccess} />\n            </Box>\n            <Box my={2}>\n              <Divider />\n            </Box>\n            <Link component={RouterLink} to=\"/login\" variant=\"body2\" color=\"textSecondary\">\n              Have an account?\n            </Link>\n          </CardContent>\n        </Card>\n      </Container>\n    </Page>\n  );\n}\n\nexport default RegisterView;\n","function track(...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    return;\n  }\n\n  if (!window.gtag) {\n    return;\n  }\n\n  window.gtag(...args);\n}\n\nfunction pageview(props) {\n  track('config', process.env.REACT_APP_GA_MEASUREMENT_ID, props);\n}\n\nfunction event(type, props) {\n  track('event', type, props);\n}\n\nexport default {\n  pageview,\n  event\n};\n","import React, { forwardRef, useEffect, useCallback } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useLocation } from 'react-router';\nimport PropTypes from 'prop-types';\nimport track from '../utils/analytics';\n\nconst Page = forwardRef(({ title, children, ...rest }, ref) => {\n  const location = useLocation();\n\n  const sendPageViewEvent = useCallback(() => {\n    track.pageview({\n      page_path: location.pathname\n    });\n  }, [location]);\n\n  useEffect(() => {\n    sendPageViewEvent();\n  }, [sendPageViewEvent]);\n\n  return (\n    <div ref={ref} {...rest}>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      {children}\n    </div>\n  );\n});\n\nPage.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string\n};\n\nexport default Page;\n"],"sourceRoot":""}